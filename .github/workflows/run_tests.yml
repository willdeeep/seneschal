name: Run Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CI: true
  TESTING: true

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint code (critical errors only)
      run: |
        source venv/bin/activate
        flake8 project/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Lint code (style warnings - non-blocking)
      continue-on-error: true
      run: |
        source venv/bin/activate
        echo "Running style checks (warnings only):"
        flake8 project/ tests/ --count --max-complexity=15 --max-line-length=120 --statistics || echo "Style warnings found but not blocking CI"

    - name: Run unit tests (fast, no external dependencies)
      run: |
        source venv/bin/activate
        coverage run -m pytest tests/unit/ -v -m "unit and not requires_db and not requires_env and not github_skip"

    - name: Run functional tests (with database, CI-safe)
      run: |
        source venv/bin/activate
        coverage run --append -m pytest tests/functional/ -v -m "functional and not github_skip and not local_only"

    - name: Generate coverage report
      run: |
        source venv/bin/activate
        coverage report -m --skip-covered
        coverage html

    - name: Upload coverage to Codecov (optional)
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: false

    - name: Archive coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  test-with-postgres:
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psycopg2-binary

    - name: Run PostgreSQL integration tests
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        ENABLE_NETWORK_TESTS: true
      run: |
        source venv/bin/activate
        pytest tests/ -v -m "requires_db or functional" --tb=short
